<?php
/**
 * StatisticsCountersStats
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Объявления
 *
 * API для получение статистики по объявлениям, применения дополнительных услуг, а также просмотр статусов объявлений  **Авито API для бизнеса предоставляется согласно [Условиям   использования](https://api.avito.ru/docs/public/APITermsOfServiceV1.pdf).**
 *
 * OpenAPI spec version: 1
 * Contact: supportautoload@avito.ru
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.27
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StatisticsCountersStats Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StatisticsCountersStats implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StatisticsCounters_stats';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'contacts' => 'int',
'date' => '\DateTime',
'favorites' => 'int',
'uniq_contacts' => 'int',
'uniq_favorites' => 'int',
'uniq_views' => 'int',
'views' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'contacts' => null,
'date' => 'date',
'favorites' => null,
'uniq_contacts' => null,
'uniq_favorites' => null,
'uniq_views' => null,
'views' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'contacts' => 'contacts',
'date' => 'date',
'favorites' => 'favorites',
'uniq_contacts' => 'uniqContacts',
'uniq_favorites' => 'uniqFavorites',
'uniq_views' => 'uniqViews',
'views' => 'views'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'contacts' => 'setContacts',
'date' => 'setDate',
'favorites' => 'setFavorites',
'uniq_contacts' => 'setUniqContacts',
'uniq_favorites' => 'setUniqFavorites',
'uniq_views' => 'setUniqViews',
'views' => 'setViews'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'contacts' => 'getContacts',
'date' => 'getDate',
'favorites' => 'getFavorites',
'uniq_contacts' => 'getUniqContacts',
'uniq_favorites' => 'getUniqFavorites',
'uniq_views' => 'getUniqViews',
'views' => 'getViews'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['favorites'] = isset($data['favorites']) ? $data['favorites'] : null;
        $this->container['uniq_contacts'] = isset($data['uniq_contacts']) ? $data['uniq_contacts'] : null;
        $this->container['uniq_favorites'] = isset($data['uniq_favorites']) ? $data['uniq_favorites'] : null;
        $this->container['uniq_views'] = isset($data['uniq_views']) ? $data['uniq_views'] : null;
        $this->container['views'] = isset($data['views']) ? $data['views'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets contacts
     *
     * @return int
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param int $contacts __DEPRECATED (будет удалено в апреле 2021 г.).__ __Используйте поле uniqContacts.__ Запросы контактов объявления.
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date Дата (в формате YYYY-MM-DD), за которую посчитаны статистические счетчики. Для группировок по периодам - дата начала периода.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets favorites
     *
     * @return int
     */
    public function getFavorites()
    {
        return $this->container['favorites'];
    }

    /**
     * Sets favorites
     *
     * @param int $favorites __DEPRECATED (будет удалено в апреле 2021 г.).__ __Используйте поле uniqFavorites.__ Добавления объявления в избранное
     *
     * @return $this
     */
    public function setFavorites($favorites)
    {
        $this->container['favorites'] = $favorites;

        return $this;
    }

    /**
     * Gets uniq_contacts
     *
     * @return int
     */
    public function getUniqContacts()
    {
        return $this->container['uniq_contacts'];
    }

    /**
     * Sets uniq_contacts
     *
     * @param int $uniq_contacts Уникальные пользрователи, запрашивавшие контакты объявления
     *
     * @return $this
     */
    public function setUniqContacts($uniq_contacts)
    {
        $this->container['uniq_contacts'] = $uniq_contacts;

        return $this;
    }

    /**
     * Gets uniq_favorites
     *
     * @return int
     */
    public function getUniqFavorites()
    {
        return $this->container['uniq_favorites'];
    }

    /**
     * Sets uniq_favorites
     *
     * @param int $uniq_favorites Уникальные пользователи, добавившие объявление в избранное
     *
     * @return $this
     */
    public function setUniqFavorites($uniq_favorites)
    {
        $this->container['uniq_favorites'] = $uniq_favorites;

        return $this;
    }

    /**
     * Gets uniq_views
     *
     * @return int
     */
    public function getUniqViews()
    {
        return $this->container['uniq_views'];
    }

    /**
     * Sets uniq_views
     *
     * @param int $uniq_views Уникальные пользователи, просматривавшие объявления
     *
     * @return $this
     */
    public function setUniqViews($uniq_views)
    {
        $this->container['uniq_views'] = $uniq_views;

        return $this;
    }

    /**
     * Gets views
     *
     * @return int
     */
    public function getViews()
    {
        return $this->container['views'];
    }

    /**
     * Sets views
     *
     * @param int $views __DEPRECATED (будет удалено в апреле 2021 г.).__ __Используйте поле uniqViews.__ Просмотры объявления.
     *
     * @return $this
     */
    public function setViews($views)
    {
        $this->container['views'] = $views;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
